{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","isLoading","setLoadingState","setRecruiters","error","setError","a","fetch","method","mode","headers","then","jsondata","json","res","console","log","catch","err","message","useEffect","fetchRecruiters","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","className","Toggle","Collapse","Nav","Link","Container","fluid","Row","Col","Jumbotron","Button","sm","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","Table","striped","bordered","hover","responsive","Alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,sUCuI5BC,MA/Hf,WAAgB,IAAD,EACsBC,oBAAS,GAD/B,mBACRC,EADQ,KACGC,EADH,OAEuBF,mBAAS,IAFhC,mBAEMG,GAFN,aAGWH,mBAAS,IAHpB,mBAGRI,EAHQ,KAGDC,EAHC,OAIaL,mBAAS,IAJtB,+DAMb,sBAAAM,EAAA,sEACQC,MAAM,0DAA0D,CAACC,OAAQ,MAAOC,KAAM,UAAUC,QAAS,CAC7G,8BAA8B,IAAI,eAAe,sBAElDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZX,EAAcW,GACdZ,EAAgBD,GAAY,MAE7BgB,OAAM,SAAAC,GAAG,OAAIb,EAASD,EAAQc,EAAIC,YAVvC,4CANa,sBAiCb,OAjCa,UA6BbC,qBAAU,YA7BG,mCA8BXC,MAIA,oCACA,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KACjB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPC,UAAU,6BACT,IAPL,0BAUA,kBAACV,EAAA,EAAOW,OAAR,MACA,kBAACX,EAAA,EAAOY,SAAR,CAAiBF,UAAU,uBACzB,kBAACG,EAAA,EAAIC,KAAL,CAAUJ,UAAU,aAAaN,KAAK,SAAtC,uBAKN,kBAACW,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,aACC,kBAACA,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWH,OAAK,GAChB,kBAACD,EAAA,EAAD,KACE,wCACA,kIACsG,kEADtG,qGAGA,8LACA,2BACE,kBAACK,EAAA,EAAD,CAAQlB,QAAQ,QAAhB,2BAMFvB,GAAa,kBAACoC,EAAA,EAAD,KACjB,kBAACE,EAAA,EAAD,CAAKP,UAAU,6BACb,kBAACQ,EAAA,EAAD,CAAKG,GAAI,GACT,kBAACC,EAAA,EAAD,CAAYZ,UAAU,QACtB,kBAACa,EAAA,EAAD,CACEC,YAAY,yBACZC,aAAW,yBACXC,mBAAiB,iBAEnB,kBAACJ,EAAA,EAAWK,OAAZ,KACE,kBAACP,EAAA,EAAD,CAAQlB,QAAQ,aAAhB,cAYL,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACC,kBAACU,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACpC,+BACE,4BACE,iCACA,yCACA,uCACA,+BAGJ,+BACE,4BACE,iCACA,oCACA,oCACA,0CASRlD,GAAS,kBAACmC,EAAA,EAAD,KAAK,kBAACC,EAAA,EAAD,KAAK,kBAACe,EAAA,EAAD,CAAO/B,QAAQ,UAAUpB,QClHhCoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdrD,OAAM,SAAAb,GACLW,QAAQX,MAAMA,EAAMe,c","file":"static/js/main.fc98ab4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Container, Row, Col, Navbar, Nav, Jumbotron, Button, Table, Form, FormControl, InputGroup, Alert} from 'react-bootstrap';\nimport { PageComponent} from './components/pagination';\nimport axios from 'axios';\n\n\nfunction App() {\n  let [isLoading, setLoadingState] = useState(true);\n  const [recruiters, setRecruiters] = useState({});\n  let [error, setError] = useState(\"\");\n  let [search, setSearch] = useState('');\n\n  async function fetchRecruiters(){\n    await fetch(\"https://cpt-backend-nodejs.herokuapp.com/cpt/recruiters\",{method: \"GET\", mode: 'no-cors',headers: {\n      'Access-Control-Allow-Origin':'*','content-type':'application/json'\n    }})//.then(response => console.log(response.json()))\n    .then(jsondata => jsondata.json())\n      .then(res => {\n        console.log(res);\n        setRecruiters(res); \n        setLoadingState(isLoading = true);\n      })\n      .catch(err => setError(error = err.message));\n    // try {\n    //   const response = await axios.get('https://cpt-backend-nodejs.herokuapp.com/cpt/recruiters',{ crossdomain: true });\n    //   console.log(response);\n    // } catch (err) {\n    //   console.error(error);\n    //   setError(error = err.message)\n    // }\n\n    \n\n  }\n\n  useEffect(() => {\n    fetchRecruiters();\n  });\n  \n  return (\n    <>\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"#\">\n        <img\n          alt=\"\"\n          src={logo}\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />{' '}\n        US CPT Recruiters Only\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Nav.Link className=\"text-white\" href=\"#home\">\n          add new recruiter\n        </Nav.Link>\n      </Navbar.Collapse>\n  </Navbar>\n  <Container fluid>\n    <Row>&nbsp;</Row>\n     <Row>\n        <Col>\n        <Jumbotron fluid>\n        <Container>\n          <h1>Welcome!</h1>\n          <p>\n            I created this page to collect in one place all the firms in the US that employs students under the <b>Curriculum Practical Training (CPT)</b> F-1 Visa. Obviously, this is not exhaustive and the list is subject to change from time to time.  \n          </p>\n          <p>If you know any firm or a recruiting firm that is not on this list, you can be of help to ther community of foreign students on CPT by adding a new recruiter. </p>\n          <p>\n            <Button variant=\"dark\">Add CPT Recruiter</Button>\n          </p>\n          </Container>\n        </Jumbotron>\n        </Col>\n     </Row>\n      {  !isLoading && <Container>\n      <Row className=\"justify-content-md-center\">\n        <Col sm={7}>\n        <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"search for recruiters \"\n          aria-label=\"search for recruiters \"\n          aria-describedby=\"basic-addon2\"\n        />\n        <InputGroup.Append>\n          <Button variant=\"secondary\">Search</Button>\n          </InputGroup.Append>\n        </InputGroup>\n          {/* <Form inline className=\"justify-content-end mb-sm-2\">\n            <FormControl fluid type=\"text\" placeholder=\"Search for recruiters\" className=\"  mr-sm-2\" />\n            <Button type=\"submit\">Search</Button>\n          </Form> */}\n        </Col>\n        {/* <Col sm={5}>\n          <PageComponent active={0} total={0} />\n        </Col> */}\n      </Row>\n     <Row>\n       <Col>\n        <Table striped bordered hover responsive>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Recruiter</th>\n                <th>Contact</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>1</td>\n                <td>Mark</td>\n                <td>Otto</td>\n                <td>@mdo</td>\n              </tr>\n              </tbody>\n        </Table>\n       </Col>\n     </Row>\n     </Container>\n      }\n      {\n        error && <Row><Col><Alert variant=\"danger\">{error}</Alert></Col></Row>\n      }\n\n    </Container>\n</>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}